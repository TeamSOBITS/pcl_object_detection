#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#Describe the package name that contains the cfg file
PACKAGE = "pcl_object_detection"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#Declare variables you want to change dynamically with rqt_reconfigure

gen.add("pointcloud_topic_name", str_t, 0, "Topic name of point cloud to subscribe to", "/points2")
gen.add("base_frame_name", str_t, 0, "Reference Frame Name", "base_footprint")
gen.add("publish_cloud_detection_range", bool_t, 0, "Publish point clouds in the detection area or", True)
gen.add("publish_cloud_object", bool_t, 0, "Publish point clouds of detected objects or", True)
gen.add("publish_pose_array", bool_t, 0, "Publish the location of the detected object or", True)
gen.add("use_tf", bool_t, 0, "Register TF of the location of the detected object or", True)
gen.add("use_sobit_pro", bool_t, 0, "Use SOBIT PRO or", False)
passthrough = gen.add_group("passthrough", state = True)
passthrough.add("passthrough_x_min", double_t, 0, "Minimum distance on x-axis of passthrough", 0.0, -10.0, 10.0)
passthrough.add("passthrough_x_max", double_t, 0, "Maximum distance on x-axis of passthrough", 2.0, -10.0, 10.0)
passthrough.add("passthrough_y_min", double_t, 0, "Minimum distance on y-axis of passthrough", -0.6, -10.0, 10.0)
passthrough.add("passthrough_y_max", double_t, 0, "Maximum distance on y-axis of passthrough", 0.6, -10.0, 10.0)
passthrough.add("passthrough_z_min", double_t, 0, "Minimum distance of passthrough z-axis", 0.15, -10.0, 10.0)
passthrough.add("passthrough_z_max", double_t, 0, "Maximum distance of passthrough z-axis", 0.8, -10.0, 10.0)
voxel_grid  = gen.add_group("voxel_grid", state = False)
voxel_grid.add("use_voxel", bool_t, 0, "Downsampling or", False)
voxel_grid.add("leaf_size", double_t, 0, "Downsampling interval[m]", 0.01, 0.001, 1.0)
plane_removal = gen.add_group("plane_removal", state = True)
plane_removal.add("threshold_distance", double_t, 0, "Distance to model threshold (user-specified parameter)", 0.015, -10.0, 10.0)
plane_removal.add("probability", double_t, 0, "Set the probability of selecting at least one sample with no outliers (model fit probability)", 0.95, -10.0, 10.0)
clustering  = gen.add_group("clustering", state = True)
clustering.add("cluster_tolerance", double_t, 0, "Set the width of the point cloud in clustering[m]", 0.05, -10.0, 10.0)
clustering.add("min_cluster_point_size", int_t, 0, "Minimum point cloud size for the cluster[個]", 100, 0, 1000000)
clustering.add("max_cluster_point_size", int_t, 0, "Maximum point cloud size for the cluster[個]", 8000, 0, 1000000)
object = gen.add_group("object", state = True)
object.add("object_size_x_min", double_t, 0, "Minimum distance of x-axis of object_size", 0.0, 0.0, 10.0)
object.add("object_size_x_max", double_t, 0, "Maximum distance on x-axis of object_size", 1.0, 0.0, 10.0)
object.add("object_size_y_min", double_t, 0, "Minimum distance on y-axis of object_size", 0.0, 0.0, 10.0)
object.add("object_size_y_max", double_t, 0, "Maximum distance on y-axis of object_size", 1.0, 0.0, 10.0)
object.add("object_size_z_min", double_t, 0, "Minimum distance on z-axis of object_size", 0.0, 0.0, 10.0)
object.add("object_size_z_max", double_t, 0, "Maximum distance on z-axis of object_size", 1.0, 0.0, 10.0)
object.add("object_centroid_offset_x", double_t, 0, "Offset of the x-axis of the object position[m]", 0.0, -1.0, 1.0)
object.add("object_centroid_offset_y", double_t, 0, "Offset of the y-axis of the object position[m]", 0.0, -1.0, 1.0)
object.add("object_centroid_offset_z", double_t, 0, "Offset of z-axis of object position[m]", 0.0, -1.0, 1.0)
placeable = gen.add_group("placeable", state = True)
placeable.add("placeable_search_interval", double_t, 0, "Search interval for placement position[m]", 0.01, 0.001, 1.0)
placeable.add("obstacle_tolerance", double_t, 0, "Obstacle tolerance in placement location search[m]", 0.05, 0.001, 1.0)
#In the last line, the second argument is the package name and the third argument is the filename minus the extension.
exit(gen.generate(PACKAGE, "pcl_object_detection", "PCLParameter"))
